#! /usr/bin/perl -w

use strict;
use File::Find;

#cd /usr/lib/nagios/plugins
#chgrp nagios check_ide_smart
#chmod o-x check_ide_smart
#chmod u+s check_ide_smart 

my @da;
find(sub{
  if ((-f $_ || -l $_) && /^(ata|scsi)-/) {
    unless (/-part\d+$/) {
      push @da,$File::Find::name;
    }
  }
},'/dev/disk/by-id/');

my @db;
{
  my %st;
  foreach my $d (sort @da) {
    my @k=stat($d);
    unless (exists $st{$k[6]}) {
      $st{$k[6]}=1;
      push @db,$d;
    }
  }
}

my @results;
my $worst=0;

if (@db) {
  foreach my $disk (@db) {
    my $dn=$disk;
    $dn =~ s/^.*-//;
    $dn =~ s/^SATA_//;
    open TEST,'-|',qw(/usr/lib/nagios/plugins/check_ide_smart -n -d),$disk;
    my $input=join('',<TEST>);
    $input =~ s/\s+$//s;
    $input =~ s/\n/, /g;
    push @results,"$dn $input";
    close TEST;
    my $code=$?;
    if ($code==3) { # unknown
      if ($worst != 1 && $worst != 1 && $worst != 4) {
        $worst=$code;
      }
    } elsif ($code==4) { # pending
      if ($worst != 2 && $worst != 1) {
        $worst=$code;
      }
    } elsif ($code==1) { # warning
      if ($worst != 2) {
        $worst=$code;
      }
    } elsif ($code==2) { # critical
      $worst=$code;
    }
    if ($worst==3) {
      $worst=$code;
    } elsif ($worst==0 && $code!=0) {
      $worst=$code;
    } elsif ($worst==1 && $code!=2) {
      $worst=$code;
    }
  }
} else {
  push @results,'No disks found';
}

print join('; ',@results),"\n";
exit $worst;

