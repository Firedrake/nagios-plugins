#! /usr/bin/perl -w

# nagios: -epn
use strict;
use Nagios::Plugin;
use Nagios::Plugin::Getopt;
use WWW::Mechanize;
use Time::HiRes qw(gettimeofday tv_interval);

my $np=Nagios::Plugin->new(shortname => 'http',
                           usage => "Usage: %s -u <uri>\n[-w <warn time>] [-c <critical time>] [-a auth]\n[-s string] [-r <regex> | -R <case-insensitive regex>]\n[-m <min_pg_size>:<max_pg_size>] [-M <age>] [-A string]",
                           version => 0.1,
                           blurb => 'Tests HTTP requests in a more browser-like way',
                           url => 'http://firedrake.org/cgi-bin/gitweb.cgi?p=nagios-plugins.git',
);

$np->add_arg(
  spec => 'uri|u=s',
  help => 'URI to test',
  required => 1,
);
$np->add_arg(
  spec => 'warning|w=i',
  help => 'WARNING if more than INTEGER seconds',
  default => 30,
);
$np->add_arg(
  spec => 'critical|c=i',
  help => 'CRITICAL if more than INTEGER seconds',
  default => 60,
);
$np->add_arg(
  spec => 'auth|a=s',
  help => 'username:password pair for HTTP basic auth',
  default => '',
);
$np->add_arg(
  spec => 'string|s=s',
  help => 'expect STRING in body',
  default => '',
);
$np->add_arg(
  spec => 'regex|r=s',
  help => 'expect REGEX in body',
  default => '',
);
$np->add_arg(
  spec => 'regexi|R=s',
  help => 'expect case-insensitive REGEX in body',
  default => '',
);
$np->add_arg(
  spec => 'size|m=s',
  help => 'min:max response size in bytes',
  default => '',
);
$np->add_arg(
  spec => 'maxage|M=i',
  help => 'maximum age in seconds',
  default => '0',
);
$np->add_arg(
  spec => 'agent|A=s',
  help => 'user-agent',
  default => 'check_http_smarter',
);

$np->getopts;
my $ng=$np->opts;

my @critfail;
my @warnfail;
my @ok;

my $mech=WWW::Mechanize->new(agent => $ng->get('agent'),
                             timeout => $ng->get('critical'),
                             autocheck => 0);
if ($ng->get('auth') =~ /(.*):(.*)/) {
  $mech->credentials($1,$2);
}

my $t0=[gettimeofday];
$mech->get($ng->get('uri'));
my $duration=tv_interval($t0);

push @ok,"${duration}s response time";

if ($duration > $ng->get('warning')) {
  push @warnfail,"${duration}s response time";
}
if ($mech->success) {
  if (my $s=$ng->get('string')) {
    if (index($mech->content,$s)<0) {
      push @critfail,'string not found';
    }
  }
  if (my $s=$ng->get('regex')) {
    unless ($mech->content =~ /$s/) {
      push @critfail,'regex not found';
    }
  }
  if (my $s=$ng->get('regexi')) {
    unless ($mech->content =~ /$s/i) {
      push @critfail,'regexi not found';
    }
  }
  if ($ng->get('size') =~ /(\d+):(\d+)/) {
    my $s=length($mech->content);
    if ($s < $1) {
      push @critfail,"Content too small: $s";
    } elsif ($s > $2) {
      push @critfail,"Content too large: $s";
    }
  }
  if (my $s=$ng->get('maxage')) {
    if ($mech->res->current_age > $s) {
      push @critfail,"Content too old: ".$mech->res->current_age;
    }
  }
} else {
  push @critfail,"Request failed - ".$mech->res->status_line;
}

my $message=join('; ',@critfail,@warnfail);

if (@critfail) {
  $np->nagios_exit(CRITICAL,$message);
} elsif (@warnfail) {
  $np->nagios_exit(WARNING,$message);
} else {
  $np->nagios_exit(OK,join('; ',@ok));
  exit 0;
}
